;PROGRAM	:4 Wire Fan Control with LCD Readings and Variable Speed
;AUTHOR		:G Benson
;DATE		  :2019 05 29
;DEVICE		:Arduino + POT2x + LCD + PCB + Fan
;MCU		  :328p
;COURSE		:ICS4U
;STATUS		:Not Working on PCB
;REFERENCE:https://www.microchip.com/webdoc/avrassembler/
;NOTES		:DD stands for Double Dabble (Shift/Add3) algorithm that converts binary (8 or 16) to packed BCD (3 or 5)
;NOTES		:Add include path to Project Properties dialog. Double Dabble, LCD.lib, and prescalers.h used. 

#include	<prescalers.inc>    ;include

;define variables/constants
#define		TOP			80		;16MHz/8/25000 = 80 = TOP (OCR2A)
.equ		cTHREE		=0x03	;DD: CONSTANTS for Double Dabble algorithm
.equ		cTHREEZERO	=0x30	;DD: ditto
.equ		POTAddress	=0x00	;LCD cursor addresses for labels
.equ		SETAddress	=0x08	;	"
.equ		RPMAddress	=0x40	;	"
.def		index		=r14	;used as a Z register address offset into the arrays
.def		temp		=r15	;temporary usage
.def		util		=r16	;readability is enhanced through the use of aliases for GP Registers
.def		count		=r17	;countdown support for various activities
.def		bin0		=r18	;DD: binary LOW byte
.def		bin1		=r19	;DD: binary HIGH byte
.def		BCD10		=r20	;DD: BCD: 2 Least significant BC Digits
.def		BCD32		=r21	;DD: BCD: Middle BC Digits
.def		BCD4		=r22	;DD: BCD: 1 Most Significant BC Digit
.def		three		=r23	;DD Registers: assigned the constant 0x03
.def		threeZero	=r24	;DD Registers: assign the constant 0x30
; ***** INTERRUPT VECTORS ************************************************
.org		0x0000				;start of vector jump table
	rjmp	reset				  ;lowest interrupt address => highest priority!
.org		ADCCaddr			;
	rjmp	ADC_vect			;
.org		INT_VECTORS_SIZE
; ***** LCD STRING LABELS ************************************************
SetLabel:
.db         "Set:",0,0	;must be null-terminated for Weiman's LCD routines (with even padding)
TempLabel:
.db         "Temp:",0		;must be null-terminated for Weiman's LCD routines (with even padding)
RPMLabel:
.db			"RPM:",0,0			;ditto

SetTable:						;
.db			" 001111213141516171819202122232425"
RPMTable:						;
.db			" 900 900 900 9001200200027003400405045004800"

reset:						          	;PC jumps to here on reset interrupt...
    ldi     util,low(RAMEND)	;initialize the stack pointer to the highest RAM address
    out     SPL,util		    	;send it
    ldi     util,high(RAMEND)	;initialize the stack pointer to the lowest RAM address
    out     SPH,util			    ;send it

	ldi		three,cTHREE		     ;DD Support
	ldi		threeZero,cTHREEZERO;ditto
	
	call	ADCSetupPOT		;Configure the ADC peripheral
	call	T2Setup				;Confiugre T2 Setting for correct PWM Mode
	call	LCD_init			;initialize devices and MCU peripherals	
	sei
wait:
	rjmp	wait				;repeat or hold...
ret								  ;unreachable

ADCSetupPOT:
	ldi		util,1<MUX0			;turn off digital use of A0 tp save power
	sts		DIDR0,util			;disable digital use of A0 (pin 14)
	ldi		util,1<<ADEN		;enable the A/D peripheral
	sts		ADCSRA,util			;load ADCSRA with util
	ori		util,1<<ADPS2 | 1<<ADPS1 | 1<<ADPS0	;divide down AD clock to 125kHz (recommended for accuracy)
	sts		ADCSRA,util			                ;set it

	clr		util				    ;not sure what the ACME bit is for so ignore it
	sts		ADCSRB,util			;free running, for now

	ldi		util, 1<<REFS0 | 1<<ADLAR	;AVCC reference (5V) and Left Adjust
	sts		ADMUX,util			        ;load ADMUX with util

	lds		util,ADCSRA			;prepare for a dummy conversion (recommended)
	ori		util,1<<ADSC		;set the SC flag
	sts		ADCSRA,util			;tstart your covnversion

dummy:
	lds		util,ADCSRA			;read the register
	sbrc	util,ADSC			  ;skip
	rjmp	dummy				    ;run conversion
	lds		util,ADCSRA			;load the value
	ori		util,1<<ADSC|1<<ADIE;Start first (real) Conversion and enable interrupt
	sts		ADCSRA,util			;load the value
ret

ADCSetupTemp:
	ldi		util,1<MUX1			;turn off digital use of A0 tp save power
	sts		DIDR1,util			;disable digital use of A0 (pin 14)
	ldi		util,1<<ADEN		;enable the A/D peripheral
	sts		ADCSRA,util			;load ADCSRA with util
	ori		util,1<<ADPS2 | 1<<ADPS1 | 1<<ADPS1	;divide down AD clock to 125kHz (recommended for accuracy)
	sts		ADCSRA,util			                    ;set it

	clr		util				    ;not sure what the ACME bit is for so ignore it
	sts		ADCSRB,util			;free running, for now

	ldi		util, 1<<REFS1 | 1<<ADLAR	;AVCC reference (5V) and Left Adjust
	sts		ADMUX,util			          ;load ADMUX with util

	lds		util,ADCSRA			;prepare for a dummy conversion (recommended)
	ori		util,1<<ADSC		;set the SC flag
	sts		ADCSRA,util			;tstart your covnversion
ret

T2Setup:
	sbi		DDRD,PD3			                    ;PWM on pin 3 (OC2B)
	ldi		util, 1<<COM2B1 | 1<<WGM21 | 1<<WGM20	;prepare register 
	sts		TCCR2A,util								;load TCCR2A with util
	ldi		util, 1<<WGM22 | T2ps8		;prepare register
	sts		TCCR2B,util								;load TCCR2B with util
	ldi		util,TOP								  ;prepare register with value
	sts		OCR2A,util								;load OCR2A with value
	clr		util									    ;clear register
	sts		OCR2B,util								;load OCR2A with util
	ldi		util,OCIE2B								;prepare register
	sts		TIMSK2,util								;update TIMSK2 with util
ret

ADC_vect:
	lds		temp,ADCH			;Grab the most significant 8 bits
	mov		util,temp			;let's determine the duty cycle...
	clr		r17					  ;clr r17
	ldi		r18,TOP				;load r18 with top
	clr		r19					  ;clr r19
	mul		r18,util			;mulitply r18 with util
	sts		OCR2B,r18			;set the duty cycle

	clr		index				;clear index
	mov		util,temp		;copy temp to util

again:
	subi	util,25			;subtract 25
	brlo	continue    ;branch to continue if lower
	inc		index				;increment index
	rjmp	again				;repeat

continue:
;perform the Double Dabble algorithm on the ADC value
	mov		bin0, temp			;restore the ADCH value and preapre for DD algorithm
	clr		bin1				    ;prepare bin1 (bin0 is already to go)
	call    bin16BCD			;convert to BCD
	call	LCDUpdate			  ;update the LCD
	lds		util,ADCSRA			;start the next conversion
	ori		util,1<<ADSC		;complete conversion
	sts		ADCSRA,util			;load value into util
reti

LCDUpdate:
	ldi     ZH, high(POTLabel)		  ;point to the base address of the POT Label
    ldi     ZL, low(POTLabel)		  ;	"
	ldi		util, POTAddress		      ;set the target address on the LCD 
    call    lcd_write_string_4d		;display it
	mov		util,BCD32				        ;obtain the hundreds (and thousands) digits
	andi	util,0x0F				          ;we only want BCD2 (the low nibble of BCD23)
	ori		util,48					          ;add 48 to get the ASCII value
	call	LCDWriteCharacter		      ;write it
	mov		util,BCD10				        ;obtain the units and tens digits
	swap	util					            ;work with the tens digit first			
	andi	util,0x0F			    	      ;mask it
	ori		util, 48				          ;add 48 to get the ASCII value
	call	LCDWriteCharacter		      ;write it
	mov		util,BCD10				        ;reload 
	andi	util,0x0F				          ;mask off the tens digit exposing the units digit 
	ori		util,48					          ;add 48 to get the ASCII value
	call	LCDWriteCharacter		      ;write it

	ldi		ZH,high(SETLabel)     ;point to the base address of the Set Temp Label
	ldi		ZL,low(SETLabel)		  ;	"
	ldi		util,DCAddress			  ;set the target address
	call	lcd_write_string_4d		;display it

	lsl		index					;shift index left
	call	DisplayDuty		;display duty

	ldi		ZH,high(RPMLabel)		  ;point to the base address of RPM label
	ldi		ZL,low(RPMLabel)		  ;	"
	ldi		util,RPMAddress			  ;set the target address
	call	lcd_write_string_4d		;display it

	lsl index						;shift index left
	call DisplayRPM			;display RPM
ret

DisplayTemp
	ldi ZH, high(TEMPTable)<<1;grab the relative base address
	ldi ZL, low(TEMPTable)<<1	;grab the high address
	add ZL, index				      ;update pointer with value

	lpm util,Z+				      ;load the next
	call LCDWriteCharacter	;write
	lpm util,Z+				      ;load the next
	call LCDWriteCharacter	;write
	ldi util,'C'			;prepare symbol
	mov count,index		;get the count
	cpi count,20			;compare with 20
	brne bypass				;branch if not equal
	ldi util,'0'			;otherwise 0
bypass:
	call LCDWriteCharacter	;write character
ret

DisplayRPM:
	ldi ZH, high(RPMTable)<<1	;grab the relative base address
	ldi ZL, low(RPMTable)<<1	;grab the high address
	add ZL, index				      ;update pointer with value

	lpm util,Z+				      ;load the next
	call LCDWriteCharacter	;write
	lpm util,Z+				      ;load the next
	call LCDWriteCharacter	;write
	lpm util,Z+				      ;load the next
	call LCDWriteCharacter	;write
	lpm util,Z+				      ;load the next
	call LCDWriteCharacter	;write
ret
; ****************************** End of Main Program Code *******************

#define		LOCALLCD		;This allows user code to override default (Appliance) wiring
.equ    lcd_D7_port         = PORTD         ; lcd D7 connection
.equ    lcd_D7_bit          = PORTD2
.equ    lcd_D7_ddr          = DDRD

.equ    lcd_D6_port         = PORTB         ; lcd D6 connection
.equ    lcd_D6_bit          = PORTB5
.equ    lcd_D6_ddr          = DDRB

.equ    lcd_D5_port         = PORTD         ; lcd D5 connection
.equ    lcd_D5_bit          = PORTD4
.equ    lcd_D5_ddr          = DDRD

.equ    lcd_D4_port         = PORTD         ; lcd D4 connection
.equ    lcd_D4_bit          = PORTD5
.equ    lcd_D4_ddr          = DDRD

.equ    lcd_E_port          = PORTD         ; lcd Enable pin
.equ    lcd_E_bit           = PORTD6
.equ    lcd_E_ddr           = DDRD

.equ    lcd_RS_port         = PORTD         ; lcd Register Select pin
.equ    lcd_RS_bit          = PORTD7
.equ    lcd_RS_ddr          = DDRD

#include	<LCDLib.asm>		;include
#include	<DoubleDabble.asm>  ;include
